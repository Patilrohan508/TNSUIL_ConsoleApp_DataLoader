// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TNSUIL_ConsoleApp_DataLoader.DBContextClass;

#nullable disable

namespace TNSUIL_ConsoleApp_DataLoader.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.AtmosphericPressure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("atmospheric_pressure", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.EvapoTranspiration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("evapo_transpiration", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.GroundWaterLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ground_water_level", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.RainFall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("rainfall", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.RelativeHumidity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("relative_humidity", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.Reservoir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("reservoirs", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.RiverWaterDischarge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("river_water_discharge", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.RiverWaterLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("river_water_level", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.SoilMoisture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("soil_moisture", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.SolarRadiation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("solar_radiation", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.Suspended_Sediment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("suspended_sediment", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.TblStations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Utility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("download")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("page")
                        .HasColumnType("integer");

                    b.Property<int>("size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("tblstations", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.Temperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("temperature", "public");
                });

            modelBuilder.Entity("TNSUIL_ConsoleApp_DataLoader.Models.WindDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgencyName")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("DataAcquisitionMode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DataValue")
                        .HasColumnType("double precision");

                    b.Property<string>("DatatypeCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MajorBasin")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StationStatus")
                        .HasColumnType("text");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tehsil")
                        .HasColumnType("text");

                    b.Property<string>("Tributary")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Village")
                        .HasColumnType("text");

                    b.Property<string>("WellAquiferType")
                        .HasColumnType("text");

                    b.Property<double?>("WellDepth")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("wind_direction", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
